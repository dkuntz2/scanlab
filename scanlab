#!/usr/bin/env python

from rawpy import imread, Params, ColorSpace
from pathlib import Path
import imageio
import numpy as np
import json
import argparse
import sys

SUPPORTED_FILE_TYPES = [
    ".raf",
]

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Convert negatives captured by a camera into workable TIFFs")
    parser.add_argument("--path", "-p", type=Path, default=Path.cwd(), help="Path to images to convert")
    parser.add_argument("--output", "-o", type=Path, default=Path.cwd(), help="Path to output converted images")
    parser.add_argument("--half", action="store_true", help="Use half-sized images (results in faster processing time)")

    args = parser.parse_args()
    input_path = args.path.resolve()
    output_path = args.output.resolve()

    if not output_path.exists():
        output_path.mkdir()

    for child in sorted(input_path.iterdir()):
        if child.suffix.lower() not in SUPPORTED_FILE_TYPES:
            continue
        print(f"Processing {child.name}")
        new_path = output_path / f"{child.stem}.tiff"

        if new_path.exists():
            print(f"{new_path} already exists, can't convert.", file=sys.stderr)
            sys.exit(1)

        with imread(str(child)) as raw:
            rgb = raw.postprocess(params=Params(
                use_auto_wb=True,
                output_color=ColorSpace.Adobe,
                output_bps=16,
                gamma=(3, 12.92),
                half_size=args.half,
                four_color_rgb=True,
            ))

        inverted = np.invert(rgb)
        imageio.imsave(str(new_path), inverted)
